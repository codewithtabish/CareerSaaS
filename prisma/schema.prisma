generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  onboardingCompleted Boolean         @default(false)
  userType            UserType?
  stripeCustomerId    String?         @unique
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  accounts            Account[]
  Authenticator       Authenticator[]
  Company             Company?
  JobSeeker           JobSeeker?
  SavedJobPost        SavedJobPost[]
  sessions            Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Company {
  id        String    @id @default(uuid())
  name      String
  location  String
  logo      String
  website   String
  xAccount  String?
  about     String
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  JobPost   JobPost[]
}

model JobSeeker {
  id        String   @id @default(uuid())
  name      String
  about     String
  resume    String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model JobPost {
  id              String         @id @default(uuid())
  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]
  status          JobPostStatus  @default(ACTIVE)
  applications    Int            @default(0)
  companyId       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  SavedJobPost    SavedJobPost[]
}

model SavedJobPost {
  id        String   @id @default(uuid())
  jobId     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  job       JobPost  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}
